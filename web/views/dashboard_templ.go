// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.960
package views

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

//go:generate templ generate

import (
	"fmt"
	"time"

	"go-log/internal/api/models"
)

type DashboardProps struct {
	Config *models.MonitoringConfig
}

type HeroProps struct {
	RefreshLabel string
}

func DashboardPage(props DashboardProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = Layout(LayoutProps{
			Title:       "System Monitoring Dashboard",
			Description: "Beautiful, real-time observability for infrastructure metrics.",
			Stylesheets: []string{"/assets/dashboard.css"},
			Scripts: []ScriptAsset{{
				Src:    "/js/dashboard/index.js",
				Module: true,
			}},
			Body: DashboardShell(props),
		}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func DashboardShell(props DashboardProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var2 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var2 == nil {
			templ_7745c5c3_Var2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = BackgroundComponent().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ChromeComponent().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<main class=\"container\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HeroSection(HeroProps{RefreshLabel: computeRefreshLabel(props.Config)}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = InitialLoadingOverlay().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = MetricsSection().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ChartsSection().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ServersSection().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = HeartbeatSection().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</main>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func BackgroundComponent() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var3 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var3 == nil {
			templ_7745c5c3_Var3 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "<div class=\"background\" data-component=\"background\"><span class=\"orb orb--teal\"></span> <span class=\"orb orb--blue\"></span></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ChromeComponent() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var4 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var4 == nil {
			templ_7745c5c3_Var4 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "<div data-component=\"chrome\" style=\"display: contents;\"><button class=\"theme-toggle\" id=\"themeToggle\" aria-label=\"Toggle theme\"><i class=\"fas fa-moon\" id=\"themeIcon\"></i></button><div class=\"connection-status hidden\" id=\"connectionStatus\" role=\"status\" aria-live=\"polite\"><span class=\"status-dot\"></span> <span id=\"connectionText\">Connected</span></div><div class=\"alerts-panel\" id=\"alertsPanel\" role=\"region\" aria-label=\"System alerts\"></div><div class=\"export-overlay\" id=\"exportOverlay\"></div><div class=\"export-panel\" id=\"exportPanel\" role=\"dialog\" aria-labelledby=\"exportTitle\"><h3 id=\"exportTitle\">Export Data</h3><div class=\"export-options\"><button class=\"export-btn\" id=\"exportCSV\" type=\"button\">Export CSV</button> <button class=\"export-btn\" id=\"exportJSON\" type=\"button\">Export JSON</button></div><button class=\"filter-action\" id=\"exportClose\" type=\"button\">Close</button></div></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func HeroSection(props HeroProps) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var5 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var5 == nil {
			templ_7745c5c3_Var5 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "<header class=\"glass-panel hero\" data-component=\"hero\"><div class=\"hero-top\"><div class=\"hero-copy\"><h1>System Monitoring</h1><p class=\"hero-subtitle\">Beautiful, real-time observability for every API, server, and heartbeat your team cares about.</p></div><div class=\"hero-actions\"><span class=\"section-badge\">Live Overview</span></div></div><div class=\"hero-meta\"><span class=\"status-pill online\" id=\"systemStatus\" role=\"status\"><span class=\"status-dot\"></span> <span class=\"status-text\">System Online</span></span><div class=\"tooltip\"><span class=\"pill\">Refresh <span id=\"refreshDisplay\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(props.RefreshLabel)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `web/views/dashboard.templ`, Line: 95, Col: 89}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</span></span><div class=\"tooltip-content\">Auto-refresh interval</div></div><span class=\"pill\">Last updated <span id=\"lastUpdated\">--</span></span> <button class=\"filter-action\" id=\"exportTrigger\" type=\"button\" aria-label=\"Export data\"><i class=\"fas fa-download\"></i> <span>Export</span></button></div><div class=\"server-switcher\" id=\"serverSwitcher\" role=\"group\" aria-label=\"Server selection\"></div><div class=\"date-filter\"><label><span>From</span> <input type=\"datetime-local\" id=\"filterFrom\" aria-label=\"Start date and time\"></label> <label><span>To</span> <input type=\"datetime-local\" id=\"filterTo\" aria-label=\"End date and time\"></label> <button type=\"button\" class=\"filter-action\" id=\"applyFilter\">Apply</button> <button type=\"button\" class=\"filter-action ghost\" id=\"clearFilter\">Clear</button></div><div class=\"range-presets\"><button class=\"range-btn\" data-range=\"1h\" type=\"button\">1h</button> <button class=\"range-btn\" data-range=\"6h\" type=\"button\">6h</button> <button class=\"range-btn\" data-range=\"24h\" type=\"button\">24h</button> <button class=\"range-btn\" data-range=\"7d\" type=\"button\">7d</button> <button class=\"range-btn\" data-range=\"30d\" type=\"button\">30d</button></div></header>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func InitialLoadingOverlay() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "<div id=\"initialLoading\" data-component=\"initial-loading\" style=\"display: flex;\"><div class=\"loading-spinner\"></div><span class=\"loading-text\">Loading dashboard...</span></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func MetricsSection() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var8 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var8 == nil {
			templ_7745c5c3_Var8 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<section class=\"section-block\" data-component=\"metrics\" role=\"region\" aria-label=\"System metrics\"><div class=\"section-heading\"><div class=\"section-title\"><span class=\"section-badge\">Live Signals</span><h2>Real-time Metrics</h2></div><p class=\"section-copy\">Track the heartbeat of your infrastructure across compute, memory, network, and storage without leaving this dashboard.</p></div><div class=\"metrics-grid\"><article class=\"glass-panel metric-card\"><div class=\"metric-header\"><div class=\"tooltip\"><span class=\"metric-label\">CPU Usage</span><div class=\"tooltip-content\">Current CPU utilization percentage</div></div><span class=\"metric-trend\" id=\"cpuTrend\" aria-label=\"CPU trend\">--</span></div><div class=\"metric-value-wrap\"><span class=\"metric-value\" id=\"cpu\" aria-label=\"CPU usage percentage\">--</span> <span class=\"metric-unit\">%</span></div><div class=\"metric-progress\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"><span class=\"progress-fill\" id=\"cpuBar\"></span></div></article><article class=\"glass-panel metric-card\"><div class=\"metric-header\"><div class=\"tooltip\"><span class=\"metric-label\">Memory</span><div class=\"tooltip-content\">RAM usage percentage</div></div><span class=\"metric-trend\" id=\"memoryTrend\" aria-label=\"Memory trend\">--</span></div><div class=\"metric-value-wrap\"><span class=\"metric-value\" id=\"memory\" aria-label=\"Memory usage percentage\">--</span> <span class=\"metric-unit\">%</span></div><div class=\"metric-progress\" role=\"progressbar\" aria-valuenow=\"0\" aria-valuemin=\"0\" aria-valuemax=\"100\"><span class=\"progress-fill\" id=\"memoryBar\"></span></div></article><article class=\"glass-panel metric-card\"><div class=\"metric-header\"><div class=\"tooltip\"><span class=\"metric-label\">Network In</span><div class=\"tooltip-content\">Incoming network traffic rate</div></div><span class=\"metric-trend\" id=\"networkRxTrend\" aria-label=\"Network in trend\">--</span></div><div class=\"metric-value-wrap\"><span class=\"metric-value\" id=\"networkRx\" aria-label=\"Network incoming rate\">--</span> <span class=\"metric-unit\">MB/s</span></div></article><article class=\"glass-panel metric-card\"><div class=\"metric-header\"><div class=\"tooltip\"><span class=\"metric-label\">Network Out</span><div class=\"tooltip-content\">Outgoing network traffic rate</div></div><span class=\"metric-trend\" id=\"networkTxTrend\" aria-label=\"Network out trend\">--</span></div><div class=\"metric-value-wrap\"><span class=\"metric-value\" id=\"networkTx\" aria-label=\"Network outgoing rate\">--</span> <span class=\"metric-unit\">MB/s</span></div></article><article class=\"glass-panel metric-card\"><div class=\"metric-header\"><div class=\"tooltip\"><span class=\"metric-label\">Load Average (1m)</span><div class=\"tooltip-content\">System load over the last minute</div></div><span class=\"metric-trend\" id=\"loadTrend\" aria-label=\"Load average trend\">--</span></div><div class=\"metric-value-wrap\"><span class=\"metric-value\" id=\"loadAvg\" aria-label=\"One minute load average\">--</span></div></article><div id=\"storageGrid\" class=\"storage-grid\" role=\"region\" aria-label=\"Storage drives\"><!-- Storage cards will be dynamically populated here --></div></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ChartsSection() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var9 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var9 == nil {
			templ_7745c5c3_Var9 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "<section class=\"section-block\" data-component=\"charts\" role=\"region\" aria-label=\"Performance charts\"><div class=\"section-heading\"><div class=\"section-title\"><span class=\"section-badge\">Trends</span><h2>Performance Visualisations</h2></div><p class=\"section-copy\">Understand how utilisation trends evolve over time with polished charts that inherit the active theme.</p></div><div class=\"charts-grid\"><article class=\"glass-panel chart-card\"><div class=\"chart-header\"><h3>System Performance</h3><span class=\"chart-subtitle\">CPU and memory usage over time</span></div><div class=\"chart-wrapper\"><canvas id=\"systemChart\" aria-label=\"System performance chart\"></canvas></div></article><article class=\"glass-panel chart-card\"><div class=\"chart-header\"><h3>Network Throughput</h3><span class=\"chart-subtitle\">Inbound vs outbound throughput (MB/s)</span></div><div class=\"chart-wrapper\"><canvas id=\"networkChart\" aria-label=\"Network throughput chart\"></canvas></div></article><article class=\"glass-panel chart-card\"><div class=\"chart-header\"><h3>Resource Distribution</h3><span class=\"chart-subtitle\">CPU, memory, and disk utilisation snapshot</span></div><div class=\"chart-wrapper\"><canvas id=\"usageDonut\" aria-label=\"Resource usage distribution chart\"></canvas></div></article></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func ServersSection() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var10 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var10 == nil {
			templ_7745c5c3_Var10 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "<section class=\"glass-panel servers-section\" data-component=\"servers\" role=\"region\" aria-label=\"Remote server metrics\"><div class=\"servers-header\"><div><div class=\"servers-title\">Remote Servers</div><div class=\"servers-meta\">Latest health signals from configured servers</div></div><div class=\"servers-summary\" id=\"serverMetricsSummary\">-- tracked</div></div><div class=\"servers-grid\" id=\"serverMetricsList\"><div class=\"servers-empty\" id=\"serverMetricsEmpty\">Server metrics will appear here soon</div></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func HeartbeatSection() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var11 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var11 == nil {
			templ_7745c5c3_Var11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "<section class=\"glass-panel heartbeat-section\" data-component=\"heartbeats\" role=\"region\" aria-label=\"Server heartbeat status\"><div class=\"heartbeat-header\"><div><div class=\"heartbeat-title\">Domain Heartbeat</div><div class=\"heartbeat-meta\">Live status across configured targets</div></div><div class=\"heartbeat-meta\" id=\"heartbeatSummary\">-- online / -- total</div></div><div class=\"heartbeat-controls\"><input type=\"text\" class=\"heartbeat-search\" id=\"heartbeatSearch\" placeholder=\"Search servers...\" aria-label=\"Search heartbeat targets\"></div><div class=\"heartbeat-grid\" id=\"heartbeatList\"><div class=\"heartbeat-empty\">No heartbeat data yet</div></div></section>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

func computeRefreshLabel(cfg *models.MonitoringConfig) string {
	if cfg == nil || cfg.RefreshTime == "" {
		return "2s"
	}
	if dur, err := time.ParseDuration(cfg.RefreshTime); err == nil && dur > 0 {
		return fmt.Sprintf("%.0fs", dur.Seconds())
	}
	return cfg.RefreshTime
}

var _ = templruntime.GeneratedTemplate
